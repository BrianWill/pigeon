
global topRow (list "_" "_" "_")
global middleRow (list "_" "_" "_")
global bottomRow (list "_" "_" "_")

func playerMove currentPlayer
    locals row col slot
    while true
        as row nil
        while (eq row nil)
            as row (prompt (concat "Player " currentPlayer ": select [t]op, [m]iddle, or [b]ottom row"))
            if (eq row "t")
                as row topRow
            elif (eq row "m")
                as row middleRow
            elif (eq row "b")
                as row bottomRow
            else
                (println "Invalid input. Try again.")
                as row nil
        as col nil
        while (eq col nil)
            as col (prompt (concat "Player " currentPlayer ": select [l]eft, [m]iddle, or [r]ight column"))
            if (eq col "l")
                as col 0
            elif (eq col "m")
                as col 1
            elif (eq col "r")
                as col 2
            else
                (println "Invalid input. Try again.")
                as col nil
        as slot (get row col)
        if (eq slot "_")
            (set row col currentPlayer)
            return
        else 
            (println "That slot is occupied! Try again.")
        

// returns "X" if X wins, returns "O" if O wins, returns "_" if no one wins, and returns "tie" if tied
func winner
    locals topRowFull middleRowFull bottomRowFull
    // check top row
    if (and (neq (get topRow 0) "_") (eq (get topRow 0) (get topRow 1) (get topRow 2)))
        return (get topRow 0)
    // check middle row
    if (and (neq (get middleRow 0) "_") (eq (get middleRow 0) (get middleRow 1) (get middleRow 2)))
        return (get middleRow 0)
    // check bottom row
    if (and (neq (get bottomRow 0) "_") (eq (get bottomRow 0) (get bottomRow 1) (get bottomRow 2)))
        return (get bottomRow 0)
    // check left column
    if (and (neq (get topRow 0) "_") (eq (get topRow 0) (get middleRow 0) (get bottomRow 0)))
        return (get topRow 0)
    // check middle column
    if (and (neq (get topRow 1) "_") (eq (get topRow 1) (get middleRow 1) (get bottomRow 1)))
        return (get topRow 1)
    // check right column
    if (and (neq (get topRow 2) "_") (eq (get topRow 2) (get middleRow 2) (get bottomRow 2)))
        return (get topRow 2)
    // check top-left to bottom-right diagonal
    if (and (neq (get topRow 0) "_") (eq (get topRow 0) (get middleRow 1) (get bottomRow 2)))
        return (get topRow 0)
    // check bottom-left to top-right diagonal
    if (and (neq (get bottomRow 0) "_") (eq (get bottomRow 0) (get middleRow 1) (get topRow 2)))
        return (get bottomRow 0)
    // check tie
    as topRowFull (and (neq (get topRow 0) "_") (neq (get topRow 1) "_") (neq (get topRow 2) "_"))
    as middleRowFull (and (neq (get middleRow 0) "_") (neq (get middleRow 1) "_") (neq (get middleRow 2) "_"))
    as bottomRowFull (and (neq (get bottomRow 0) "_") (neq (get bottomRow 1) "_") (neq (get bottomRow 2) "_"))
    if (and topRowFull middleRowFull bottomRowFull)
        return "tie"
    return "_"



func main
    locals w currentPlayer
    as currentPlayer "X"
    while true
        (print (concat topRow "\n" middleRow "\n" bottomRow "\n"))
        as w (winner)
        if (eq w "X")
            (println "X's win!")
            return
        elif (eq w "O")
            (println "O's win!")
            return
        elif (eq w "tie")
            (println "Tie!")
            return
        else
            (playerMove currentPlayer)
            // toggle the current player
            if (eq currentPlayer "X")
                as currentPlayer "O"
            else
                as currentPlayer "X"








