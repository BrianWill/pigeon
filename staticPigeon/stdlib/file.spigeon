nativeimport "os" os

nativestruct File
'''
    file *os.File
'''

// fails if the file already exists
nativefunc createFile name Str writeable Bool : File Err
'''
    f, err := os.Create(name)
    return File{f}, err
'''

// fails if the file does not already exist
nativefunc openFile name Str writeable Bool : File Err
'''
    var flag int
    if writeable {
        flag = os.O_RDWR
    } else {
        flag = os.O_RDONLY
    }
    f, err := os.OpenFile(name, flag, os.ModePerm)
    if err != nil {
        return File{}, err
    }
    return File{f}, nil
'''

nativefunc readFile f File bytes S<Byte> : I Err
'''
    i, err := f.file.Read(bytes)
    return int64(i), err
'''

nativefunc writeFile f File bytes S<Byte> : I Err
'''
    i, err := f.file.Write(bytes)
    return int64(i), err
'''

nativefunc closeFile f File : Err
'''
    return f.file.Close()
'''

nativefunc seekFile f File offset I : I Err
'''
    return f.file.Seek(offset, 1)
'''

nativefunc seekFileStart f File offset I : I Err
'''
    return f.file.Seek(offset, 0)
'''

nativefunc seekFileEnd f File offset I : I Err
'''
    return f.file.Seek(offset, 2)
'''

func main
    (print "yo")