global topRow (list "_" "_" "_")
global middleRow (list "_" "_" "_")
global bottomRow (list "_" "_" "_")

func playerMove currentPlayer
    locals move row col slot
    as move nil
    while (eq move nil)
        as row nil
        while (eq row nil)
            as row (prompt "Select [t]op, [m]iddle, or [b]ottom row, player " currentPlayer)
            if (eq row "t")
                as row topRow
            elseif (eq row "m")
                as row middleRow
            elseif (eq row "b")
                as row bottomRow
            else
                (print "Invalid input. Try again.")
                as row nil
        as col nil
        while (eq col nil)
            as col (prompt "Select [l]eft, [m]iddle, or [r]ight column, player " currentPlayer)
            if (eq col "l")
                as row 0
            elseif (eq row "m")
                as row 1
            elseif (eq row "r")
                as row 2
            else
                (print "Invalid input. Try again.")
                as row nil
        as slot (get row col)
        if (eq slot "_")
            (set row col currentPlayer)
            as move true                       // signal that we're done
        else 
            (print "That slot is occupied! Try again.")
        

// returns "X" if X wins, returns "O" if O wins, returns "_" if no one wins, and returns "tie" if tied
func winner
    locals topRowFull middleRowFull bottomRowFull
    // check top row
    if (and (neq topRow[0] "_") (eq topRow[0] topRow[1] topRow[2]))
        return topRow[0]
    // check middle row
    if (and (neq middleRow[0] "_") (eq middleRow[0] middleRow[1] middleRow[2]))
        return middleRow[0]
    // check bottom row
    if (and (neq bottomRow[0] "_") (eq bottomRow[0] bottomRow[1] bottomRow[2]))
        return bottomRow[0]
    // check left column
    if (and (neq topRow[0] "_") (eq topRow[0] middleRow[0] bottomRow[0]))
        return topRow[0]
    // check middle column
    if (and (neq topRow[1] "_") (eq topRow[1] middleRow[1] bottomRow[1]))
        return topRow[1]
    // check right column
    if (and (neq topRow[2] "_") (eq topRow[2] middleRow[2] middleRow[2]))
        return topRow[2]
    // check top-left to bottom-right diagonal
    if (and (neq topRow[0] "_") (eq topRow[0] middleRow[1] bottomRow[2]))
        return topRow[0]
    // check bottom-left to top-right diagonal
    if (and (neq bottomRow[0] "_") (eq bottomRow[0] middleRow[1] topRow[2]))
        return bottomRow[0]
    // check tie
    as topRowFull (and (neq topRow[0] "_") (neq topRow[1] "_") (neq topRow[2] "_"))
    as middleRowFull (and (neq middleRow[0] "_") (neq middleRow[1] "_") (neq middleRow[2] "_"))
    as bottomRowFull (and (neq bottomRow[0] "_") (neq bottomRow[1] "_") (neq bottomRow[2] "_"))
    if (and topRowFull middleRowFull bottomRowFull)
        return "tie"
    return "_"

func main
    locals w done currentPlayer
    as currentPlayer "X"
    as done false
    while (not done)
        (print (concat topRow "\n" middleRow "\n" bottomRow "\n"))
        as w (winner)
        if (eq w "X")
            (print "X's win!")
            as done true
        elseif (eq w "O")
            (print "O's win!")
        elseif (eq w "tie")
            (print "Tie!")
            as done true
        else
            (playerMove currentPlayer)
            // toggle the current player
            if (eq currentPlayer "X")
                as currentPlayer "O"
            else
                as currentPlayer "X"
